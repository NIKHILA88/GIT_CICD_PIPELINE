before_script: 
    - echo "Before Script"
    - hostname
    - echo $index
    - echo $path
    - echo $new
    - echo $app

 

stages:
    - test
    - build
    - deploy

 

test:
  stage: test
  script: 
    - echo "Running tests"
    - pwd
    - ls deployment-apps/ | grep $index  > /tmp/john.txt
    - cat /tmp/john.txt | rev | cut -f1 -d"_" | rev > /tmp/test.txt
    - cat /tmp/test.txt
    - for i in $(cat /tmp/test.txt)
    - do
    - if [ $i -eq "inputs" ]; then
    - myinputs=`ls -1 -d "$mypath"/"$index"_"$i"/default/"$i".conf`
    - fi
    - if [ $i -eq "props" ]
    - then
    - myprops=`ls -1 -d "$mypath"/"$index"_"$i"/default/"$i".conf`
    - fi
    - done
    - ../../../confValidator.exe $myinputs $myprops > /tmp/confValidator.log
    - if grep -q "ERROR" /tmp/confValidator.log; then
    - cat /tmp/confValidator.log
    - echo "found ERROR in Props, do not deploy"
    - exit 1
    - fi
    - echo "Error not found"

 

build:
  stage: build
  script: 
    - echo "Deploy to Deployment server"
    - pwd
    - cd /opt/splunk/etc
    - git checkout master
    - git pull origin master
    - git status
    - if [ $new = "yes" ]; then
    - echo "Deploying new app"
    - echo "cloning umrf-onboarding from git"
    - cd /tmp/
    - sudo -u splunk git clone git@gitlab.prod.fedex.com:APP3530768/umrf-onboarding.git 
    - echo "copy deployment_indexes.txt to tmp"
    - cd umrf-onboarding/
    - cp deployment_indexes.txt /tmp/
    - cd /tmp/
    - for app in $(cat deployment_indexes.txt)
    - do
    - echo "show tree structure to validate if all directories are created or not"
    - sudo -u splunk tree /opt/splunk/current/etc/deployment-apps/$app\_inputs
    - sudo -u splunk tree /opt/splunk/current/etc/deployment-apps/$app\_props
    - sudo -u splunk tree /opt/splunk/current/etc/deployment-apps/$app\_search
    - echo create 4 stanzas for serverclass.conf
    - printf '\n[serverClass:'$app':app:'$app'_inputs]\nrestartSplunkWeb = 0\nrestartSplunkd = 1\nstateOnClient = enabled\n\n[serverClass:All 1A indexers via Master Node:app:'$app'_props]\nrestartSplunkWeb = 0\nrestartSplunkd = 0\nstateOnClient = noop\n\n[serverClass:All 1A Search Heads via Deployer:app:'$app'_props]\nrestartSplunkWeb = 0\nrestartSplunkd = 0\nstateOnClient = noop\n\n[serverClass:All 1A Search Heads via Deployer:app:'$app'_search]\nrestartSplunkWeb = 0\nrestartSplunkd = 0\nstateOnClient = noop\n\n[serverClass:'$app']' | sudo -u splunk tee -a /opt/splunk/current/etc/system/local/serverclass.conf
    - echo whitelisting application servers
    - count=0
    - for host in $(cat /tmp/umrf-onboarding/$app/test/hostlist.txt)
    - do
    - printf 'whitelist.'$count' = '$host'\n' | sudo -u splunk tee -a /opt/splunk/current/etc/system/local/serverclass.conf
    - (( count++ ))
    - done
    - echo create stanza for newly created index in index.conf
    - printf '\n['$app']\nhomePath = volume:default/'$app'/db\ncoldPath = volume:default/'$app'/colddb\nthawedPath = $SPLUNK_DB/'$app'/thaweddb\nfrozenTimePeriodInSecs = 1296000\n\n' | sudo -u splunk tee -a /opt/splunk/current/etc/deployment-apps/fedex_1a_custom_indexes/local/indexes.conf
    - echo reload serverclass
    - sudo -u splunk /opt/splunk/current/bin/splunk reload deploy-server $app -auth $user:$pass
    - done
    - exit

 

deploy_staging:
  stage: deploy
  script:
    - echo "Deploy to ClusterMaster and Deployer"
    - pwd
    - sudo -u splunk /opt/splunk/current/bin/splunk reload deploy-server -class "All 1A Indexers via Master Node" -auth `cat /opt/home/splunk/.adminp64 |base64 --decode`
    - sudo -u splunk /opt/splunk/current/bin/splunk reload deploy-server -class "All 1A Search Heads via Deployer" -auth `cat /opt/home/splunk/.adminp64 |base64 --decode`
    - ssh -i ~/.ssh/deployment_key f3763442@drh00488.ute.fedex.com "hostname && /opt/splunk/cm_push.sh"
    - ssh -i ~/.ssh/deployment_key f3763442@drh00518.ute.fedex.com "hostname && /opt/splunk/sh_push.sh"
    - exit

 

  only:
  - master
